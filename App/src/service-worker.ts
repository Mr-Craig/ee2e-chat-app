/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

declare const self: ServiceWorkerGlobalScope;

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }: { request: Request; url: URL }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    }

    // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith('/_')) {
      return false;
    }

    // If this looks like a URL for a resource, because it contains
    // a file extension, skip.
    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    }

    // Return true to signal that we want to use the handler.
    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'),
  // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

const sendMessage = async (msg : any) => {
  await self.clients.matchAll({
    includeUncontrolled: true,
    type: 'window',
  }).then((clients) => {
    if (clients && clients.length) {
      clients[0].postMessage(msg);
    }
  });
}

//https://stackoverflow.com/a/45206466
async function checkClientIsVisible(): Promise<boolean> {
  const windowClients = await self.clients.matchAll({
    type: "window",
    includeUncontrolled: true,
  });

  for (var i = 0; i < windowClients.length; i++) {
    if (windowClients[i].visibilityState === "visible") {
      return true;
    }
  }

  return false;
}

async function handleNotification(data : string) : Promise<void> {
  const isVisible = await checkClientIsVisible();
  if(isVisible)
    return;

  const notif = await self.registration.showNotification("Notification", {
    body: data,
    icon: "https://i.imgur.com/iYrUHiE.png",
  });

  return;
}

self.addEventListener("push", async (ev) => {
  console.log(`[SW] Push Notification: ${ev.data?.text()}`);
  if(ev.data) {
    const notifPromise = handleNotification(ev.data.text());

    ev.waitUntil(notifPromise);
  }
});

self.addEventListener('notificationclick', function(event) {
  event.notification.close();

  //https://web.dev/push-notifications-common-notification-patterns/
  const promiseChain = self.clients
    .matchAll({
      type: 'window',
      includeUncontrolled: true,
    })
    .then((windowClients) => {
      let matchingClient = null;

      for (let i = 0; i < windowClients.length; i++) {
        matchingClient = windowClients[i];
        break;
      }

      if (matchingClient) {
        return matchingClient.focus();
      } else {
        return self.clients.openWindow(self.location.origin);
      }
  });

  event.waitUntil(promiseChain);
});

self.addEventListener('message', async (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }

  if(event.data && event.data.type === 'NOTIF_ON') {
    console.log(event.data.key);
    self.registration.pushManager.subscribe({
      userVisibleOnly: true,
      applicationServerKey: event.data.key
    }).then((sub) => {
      sendMessage({
        type: 'NOTIF_ON',
        error: false,
        sub: sub.toJSON()
      });
    }).catch((err) => {
      sendMessage({
        type: 'NOTIF_ON',
        error: true,
        message: err
      });
    })
  } else if(event.data && event.data.type === 'NOTIF_OFF') {
    self.registration.pushManager.getSubscription().then(async (sub) => {
      await sub?.unsubscribe();
      sendMessage({
        type: 'NOTIF_OFF',
        error: false
      });
    }).catch((err) => {
      sendMessage({
        type: 'NOTIF_OFF',
        error: true,
        message: err
      });
    })
  }
});

// Any other custom service worker logic can go here.
